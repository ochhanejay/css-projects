
    Date Type:
    =======================================

var product = {
    name: "",
    price: 0.0,
    mfd: ?  
}

    mfd: "12-06-2021"   ->  Not date - it is string
    Mfd: 12-06-2021     ->  Not valid

Javascript: Date() constructor.

    var mfd: new Date();

The default "Date()" constructor will load the current date into memory.

Custom date Format: "YY-MM-DD".

    var mfd = new Date("YY-MM-DD");

You can also configure the date value seperated with coma

var Mfd = new Date(year, month, day, hours, minutes, seconds, miliseconds);

Eg: 

<script>
    function f1(){
        var product = {    
            Name: "Milk",
            price: 45000,
            Mfd: new Date("2021-09-27")
        }
        document.write(`Name = ${product.Name} Manufacture = ${product.Mfd}`)
    }
    f1();

</script>

==============================================================
        Date Object Methods to Read Date

Method:                             Description

getHours()  ->  24hr [0-23]

getMinute() ->  [0-59]

getSeconds()    ->  [0-59]

getMiliseconds()    [0 to 999] // 1000 milisec = 1 sec

getMonth()  ->  [0-11]

getDay()    ->  [0-6]

getYear()   ->  Depricated
            1999    ->  99
            2000    ->  100
            2020    ->  120

getFullYear()           ->  it returns full year number

toDateString()          ->  Returns only date

toLocaleDateString()    ->  Returns date in short format

toLocaleTimeString()    ->  Returns time in short format

toString()              ->  Date to String



<script>
    function f1(){
        var product = {    
            Name: "Milk",
            price: 45000,
            Mfd: new Date("2021-09-27")
        }
        document.write(`Name = ${product.Name} Manufacture = ${product.Mfd.toLocaleDateString()}`)
    }
    f1();

</script>


Ex:

<script>
    function f1(){
        var product = {    
            Name: "Milk",
            price: 45000,
            Mfd: new Date("2021-04-27")
        }
        var months = ['January', 'Feb', 'Mar', 'April', 'May'];
        var weekdays = ['Sun', 'Mon', 'Tue', 'Wed']
        document.write(`Name = ${product.Name} Manufacture = ${product.Mfd.toLocaleDateString()}`)
        document.write(`<br> Manufactored Month: ${months[product.Mfd.getMonth()]} <br> WeekDay: ${weekdays[product.Mfd.getDay()]}
        <br> MFD ${product.Mfd.getDate()} <br> MFD Year = ${product.Mfd.getFullYear()} 
        <br> Time: ${product.Mfd.getTime()}
        `)
            
    }   
    f1();

</script>

=============================================================================
            JavaScript Date Functions to set a new value

setDate()               :    It sets the day of the month
setFullYear()           :    It sets the year of the date
// we don't have weekday 
setHours()              :    It sets the hour number of date
setMinutes()
setSeconds()
setMiliSeconds()
setMonth()
setTime()


==============================================
        JavaScript Timer Events
    
setInterval()
setTimeout()
clearInterval()
clearTimeout()


===================
<script>
    function GetTime() {
        var now = new Date();
        document.getElementById('timer').innerHTML = now.toLocaleTimeString();
    }
    
    function f1(){
            setInterval(GetTime, 1000);
    }   
    
</script>
<body onload="f1()">
    <div align="center" id="timer">

    </div>
</body>
==================================================================================================
                        Operators:
                    
->  Operators is an object used to configure an expression in order to evaluate an value.
->  Operator uses operands and a sign/operator to evaluate a value
        a + b;
    a is left operand 
    b is right operand
    + is a sign/operator
->  Data is present in operands and value is evaludated according to the sign/operator defined.
->  Based on the number of operands an operator can handle.

    they are classified into 3 types

    a)  Unary Operator:     one operand
        a++, --a 
    b)  Binary Operator:    two operand
        a + b
    c) Turnery Operator:    three operand
        (condition) ? true: false;

->  Based on the type of value an operator return they are further classfied into several types.

    1.  Assginment Operator
    2.  Comparision Operators
    3.  Arithmatic Operators
    4.  Bitwise Operators
    5.  Logical Operators
    6.  String Operator [Turnery]
    7.  Special Operator
    8.  Comma Operator
    9.  Unary Operator
    10. Relational Operators

1.  Arithmatic Operator
---------------------------------------
+
-
*
/
%   Modulus Devision Remainder
**  Exponent [Power] - [new from ES5]
++  Increment
Decrement

<script>
    function f1(){
        var x = 2;
        var y = 3;
        document.write(`X**Y = ${x**y} <br>`);
        document.write(`Math.pow() = ${Math.pow(x,y)} <br>`);

    }
    
    f1();
</script>


Ex: Increment and Decrement
    ++ --
    form: x++   =>  x = x + 1;
    x++     Post Increment
    x--     Post Decrement


    x = 10;
    y = x++;
    O/P:    x=10 , y=11
    O/P:    x=11, y=10;

    POST: The value is first assigned to left operand and then the Increment/Decrement will happen.



Eg:
<script>
    function f1(){
        var x = 10;
        var y = x++; // x=x+1
        console.log(`X = ${x++}`)
        console.log(`X = ${x}`)
        if(x-- == 12) {
            alert(`true x = ${x}`);
        } else {
            alert('false')
        }
    }
    
    f1();
    </script>

===========================================================
    ++x Pre Increment
    --x Pre Decrement

    X = 10;
    Y = ++X;

    O/P:    X=11, Y=11
=============================================================

Addition Operator:  It is used to find the sum of given values.

    x = 10
    y = true

    x + y ? 

================================================================

    string + string =   string
    string + number =   string
    string + boolean=   string
    string + null   =   string

    number + number = number
    number + boolean = number
    number + string = string
    number + null   =   number: x = 10, y = null: x+y = 10

    boolean + number = number
    boolean + boolean = number  
    boolean + string = string
    boolean + null = number: 

    null + null     =   number: 0

    Undefined:  Anything with Undefined type will return NaN(Not a number) except string type.
    String uses concatination.

    string + Undefined  =   string
    number + Undefined  =   NaN
    boolean + Undefined =   NaN
    Undefined + Undefined = NaN

==============================================================================================

            Assginment Operator
            ===================

=       Assign
+=      Add an assign: x = 10; x = x + 2; (x += 2)
-=      Substract and assign
*=      Multiply and Assign
/=      Divide and Assign
%=      Modulus division and Assign
**=     Exponent and Assign
=================================================================================
            Comparision Operators
        =============================

==      Equal to
===     Identical Equal
!=      Not Equal
!==     Not Identical Equal
>       Greater than
<       Less than
>=      Grater than or Equal
<=      Less than oor Equal

All Comparision operators return boolean true or false

"=="    can compare value of two different types. it can also 
        implicitly convert the value.
    
<script>
    function f1(){
        var x = 10;
        var y = "10"; 
        document.write(`x==y?  ${x==y}`); // true
    }
    f1();
</script>


"==="  is compare only the values of same type. it can't implicitly convert the values.
        if different types of value are compare then it always return false.
    
 <script>
    function f1(){
        var x = 10;
        var y = "10"; 
        document.write(`x===y?  ${x===y}`); // false
    }
    f1();
</script>   

=======================================================================================================
                Logical Operators:  Logical gates

&&  Logical AND
!!  Logical OR
!   Logical NOT

        (condition) && (condition) : true only when: both condition true
            1           1           :   1
            1           0           :   0
            0           1           :   0
            0           0           :   0
        
        (condition) || (condition)  :   true when any one condition true
            1           1           :   1
            1           0           :   1
            0           1           :   1
            0           0           :   0

        var x = true
        var y = !x; // false
==============================================================================
                Bitwise Operators:  
        &   AND
        |   OR
        ~   NOT
        ^   XOR
        <<  left shift
        >>  right shift
        >>> right shift
==================================================================================
            Special Operators
        
1.  Ternery Operators [?:]
    It is similar to simple condition "if..else"

    (condition) ? statement_true : statement_false;

2.  typeof
    It returns the data type of value stored in memory reference.

3.  instanceof operator:    it checks wheather the given object is derived from specific
                            parent type or class and retun boolean true or false.
    

    <script>
    class Employee {

    }
    function f1() {
        var cities = new Array();
        var emp = new Employee();

        document.write(`Cities is from Array: ${cities instanceof Array}`)
    }
    f1();
    </script>

4.  delete operator:    it is used to delete any property of an object. you can't delete properties
                        of an built-in object of JavaScript as they are readonly.
                
                                                
                        <script>
                            function f1(){
                                var product = {
                                    Name: 'TV',
                                    price: 45000
                                }
                                delete product.price;
                                debugger
                                document.write(`${product} :: ${product.price}`)
                            }
                            f1();
                        </script>



5.  in operator:    It is used to search for a property in any object and return true of proeprty found.


                    <script>
                        function f1(){
                            var product = {
                                Name: 'TV',
                                price: 45000
                            }
                            delete product.price;
                            if('price' in product ) {
                                document.write(`${product.Name} :: ${product.price}`)
                            } else {
                                document.write(`${product.Name}`)
                            }
                            
                        }
                        f1();
                    </script>

6.  of operator:    it is used to read all values of a collection over iteration and return values. [for]


                    <script>
                        function f1(){
                            var product = ['TV', 'Mobile', 'Shoe']
                            for(var item of product) {
                                document.write(`${item} <br>`)
                            }
                            
                        }
                        f1();
                    </script>


7.  new operator:   It is dynamic memory allocating operator: // oops concept
                    It allocates memory for any object and loads the members into memory.

            Syntax: 
                    var now = new Date();
                    var names = new Array()


                    <script>
                        function CreatePhoto() {
                            var pic  = new Image();
                            pic.src = "../day12/brownie.jpg";
                            pic.height = 100;
                            pic.width =100;
                            document.getElementById('container').appendChild(pic)

                        }
                    </script>

                    <body>
                        <button onclick="CreatePhoto()">Create Image</button>
                        <br>
                        <div id="container">

                        </div>
                    </body>
         

void operator:  

